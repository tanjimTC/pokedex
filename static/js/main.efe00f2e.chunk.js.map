{"version":3,"sources":["PokeDex.js","Pokemon.js","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","root","flexGrow","CardContainer","maxWidth","margin","pokeDexContainer","padding","width","title","avatar","spacing","height","marginLeft","marginRight","searchContainer","display","backgroundColor","fade","palette","common","white","paddingLeft","paddingRight","searchIcon","alignSelf","marginBottom","searchInput","PokeDex","props","useState","pokemonData","setPokemonData","classes","filter","setFilter","useEffect","fetch","then","response","json","details","results","newPokemonData","forEach","pokemon","index","id","name","sprite","className","AppBar","elevation","position","Toolbar","TextField","onChange","e","target","value","label","variant","Grid","container","Fragment","Object","keys","map","x","includes","key","item","xs","sm","to","style","textDecoration","Card","CardActionArea","Avatar","src","CardContent","Typography","gutterBottom","component","align","maxwidth","borderRadius","images","Pokemon","pokemonId","useParams","undefined","setPokemon","axios","get","data","catch","error","gridCOntainer","sprites","front_default","alt","Box","Link","href","species","url","weight","types","y","type","CircularProgress","createMuiTheme","responsiveFontSizes","App","ThemeProvider","exact","path","Boolean","window","location","hostname","match","history","createBrowserHistory","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.efe00f2e.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { fade, makeStyles } from \"@material-ui/core/styles\";\r\nimport AppBar from \"@material-ui/core/AppBar\";\r\nimport Toolbar from \"@material-ui/core/Toolbar\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport SearchIcon from \"@material-ui/icons/Search\";\r\nimport { Link } from \"react-router-dom\";\r\nimport {\r\n  Grid,\r\n  Card,\r\n  CardContent,\r\n  CardActionArea,\r\n  Avatar,\r\n  TextField,\r\n} from \"@material-ui/core\";\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    flexGrow: 1,\r\n  },\r\n  CardContainer: {\r\n    maxWidth: 345,\r\n    margin: \"auto\",\r\n  },\r\n  pokeDexContainer: {\r\n    padding: \"10px 50px\",\r\n    width: \"100%\",\r\n  },\r\n  title: {\r\n    flexGrow: 1,\r\n  },\r\n  avatar: {\r\n    width: theme.spacing(15),\r\n    height: theme.spacing(15),\r\n    marginLeft: \"auto\",\r\n    marginRight: \"auto\",\r\n  },\r\n  searchContainer: {\r\n    display: \"flex\",\r\n    backgroundColor: fade(theme.palette.common.white, 0.15),\r\n    paddingLeft: \"20px\",\r\n    paddingRight: \"20px\",\r\n    width : '300px',\r\n    margin: \"5px auto\",\r\n  },\r\n  searchIcon: {\r\n    alignSelf: \"flex-end\",\r\n    marginBottom: \"5px\",\r\n  },\r\n  searchInput: {\r\n    width: \"200px\",\r\n    margin: \"5px\",\r\n  },\r\n}));\r\nconst PokeDex = (props) => {\r\n  const [pokemonData, setPokemonData] = useState({});\r\n  const classes = useStyles();\r\n  const [filter, setFilter] = useState(\"\");\r\n  useEffect(() => {\r\n    fetch(\"https://pokeapi.co/api/v2/pokemon?limit=50\")\r\n      .then((response) => response.json())\r\n      .then((details) => {\r\n        const { results } = details;\r\n        const newPokemonData = {};\r\n        results.forEach((pokemon, index) => {\r\n          newPokemonData[index + 1] = {\r\n            id: index + 1,\r\n            name: pokemon.name,\r\n            sprite: `https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/${\r\n              index + 1\r\n            }.png`,\r\n          };\r\n        });\r\n        setPokemonData(newPokemonData);\r\n      });\r\n  }, []);\r\n  const handleSearchChange = (e) => {\r\n    setFilter(e.target.value);\r\n  };\r\n  return (\r\n    <div className={classes.root}>\r\n      <AppBar elevation={0} position=\"static\">\r\n        <Toolbar>\r\n          <div className={classes.searchContainer}>\r\n            <SearchIcon className={classes.searchIcon} />\r\n            <TextField\r\n              className={classes.searchInput}\r\n              onChange={handleSearchChange}\r\n              label=\"Pokemon\"\r\n              variant=\"standard\"\r\n            />\r\n          </div>\r\n        </Toolbar>\r\n      </AppBar>\r\n      <Grid container className={classes.pokeDexContainer} spacing={2}>\r\n        <React.Fragment>\r\n          {Object.keys(pokemonData).map(\r\n            (x) =>\r\n              pokemonData[x].name.includes(filter) && (\r\n                <Grid key={x} item xs={12} sm={3}>\r\n                  <Link to={`pokemon/${x}`} style={{ textDecoration: \"none\" }}>\r\n                    <Card className={classes.CardContainer}>\r\n                      <CardActionArea>\r\n                        <Avatar\r\n                          className={classes.avatar}\r\n                          src={`https://pokeres.bastionbot.org/images/pokemon/${x}.png`}\r\n                          title=\"Contemplative Reptile\"\r\n                        />\r\n\r\n                        <CardContent>\r\n                          <Typography\r\n                            gutterBottom\r\n                            variant=\"subtitle1\"\r\n                            component=\"h3\"\r\n                            align=\"center\"\r\n                          >\r\n                            {x} {pokemonData[x].name}\r\n                          </Typography>\r\n                        </CardContent>\r\n                      </CardActionArea>\r\n                    </Card>\r\n                  </Link>\r\n                </Grid>\r\n              )\r\n          )}\r\n        </React.Fragment>\r\n      </Grid>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PokeDex;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport {\r\n  Box,\r\n  Typography,\r\n  Grid,\r\n  Link,\r\n  CircularProgress,\r\n} from \"@material-ui/core\";\r\nimport axios from \"axios\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nconst useStyles = makeStyles((theme) => ({\r\n  details: {\r\n    maxwidth: \"300px\",\r\n    margin: \"50px auto\",\r\n    padding: \"10px 20px\",\r\n    backgroundColor: \"#fff\",\r\n    borderRadius: \"20px\",\r\n  },\r\n  images: {\r\n    width: \"250px\",\r\n    height: \"250px\",\r\n  },\r\n}));\r\nconst Pokemon = (props) => {\r\n  const classes = useStyles();\r\n  const { pokemonId } = useParams();\r\n  const [pokemon, setPokemon] = useState(undefined);\r\n  useEffect(() => {\r\n    axios\r\n      .get(`https://pokeapi.co/api/v2/pokemon/${pokemonId}/`)\r\n      .then(function (response) {\r\n        const { data } = response;\r\n        setPokemon(data);\r\n      })\r\n      .catch(function (error) {\r\n        setPokemon(false);\r\n      });\r\n  }, [pokemonId]);\r\n  // const { name, id, species, height, weight, types, sprites } = pokemon;\r\n  //   const fullImageUrl = `https://pokeres.bastionbot.org/images/pokemon/${id}.png`;\r\n  //   const { front_default } = sprites;\r\n  return (\r\n    <Grid container className={classes.gridCOntainer}>\r\n      {pokemon !== undefined ? (\r\n        <Grid item className={classes.details}>\r\n          <Typography variant=\"h3\">\r\n            {pokemonId}. {pokemon.name}\r\n            <img src={pokemon.sprites.front_default} alt=\"\" />\r\n          </Typography>\r\n          <Box component=\"div\" style={{ width: \"100%\", margin: \"20px 5px\" }}>\r\n            <img\r\n              className={classes.images}\r\n              src={`https://pokeres.bastionbot.org/images/pokemon/${pokemon.id}.png`}\r\n              alt=\"\"\r\n            />\r\n          </Box>\r\n          <Typography variant=\"h4\">Pokemon Details</Typography>\r\n          <Typography variant=\"subtitle2\">\r\n            Species :<Link href={pokemon.species.url}> {pokemon.name}</Link>\r\n          </Typography>\r\n          <Typography>Height : {pokemon.height}</Typography>\r\n          <Typography>Weight : {pokemon.weight}</Typography>\r\n          <Typography variant=\"subtitle1\">Types:-</Typography>\r\n          {pokemon.types.map((x, y) => (\r\n            <Typography variant=\"subtitle2\" key={y}>\r\n              <ul style={{ margin: \"0\" }}>\r\n                <li>{x.type.name}</li>\r\n              </ul>\r\n            </Typography>\r\n          ))}\r\n        </Grid>\r\n      ) : (\r\n        <Grid item className={classes.details}>\r\n          <CircularProgress />\r\n        </Grid>\r\n      )}\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default Pokemon;\r\n","import React from 'react';\nimport { Switch, Route } from 'react-router-dom';\nimport PokeDex from './PokeDex';\nimport Pokemon from './Pokemon';\nimport {\n  createMuiTheme,\n  ThemeProvider,\n  responsiveFontSizes,\n} from \"@material-ui/core/styles\";\nlet theme = createMuiTheme();\ntheme = responsiveFontSizes(theme);\nfunction App() {\n  return (\n    <div className=\"App\">\n      <ThemeProvider theme={theme}>\n      <Switch>\n        <Route exact path='/'>\n          <PokeDex/>\n        </Route>\n        <Route path='/pokemon/:pokemonId'>\n          <Pokemon/>\n        </Route>\n        <Route path='*'> \n          <center>\n            <h3>\n              page not found\n            </h3>\n          </center>\n        </Route>\n      </Switch>\n      </ThemeProvider>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { HashRouter as  Router } from \"react-router-dom\";\nimport { createBrowserHistory } from \"history\";\nconst history = createBrowserHistory();\nReactDOM.render(\n  <React.StrictMode>\n    <Router history={history}>\n      <App />\n    </Router>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}